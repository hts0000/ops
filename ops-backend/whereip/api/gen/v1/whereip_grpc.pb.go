// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: whereip.proto

package whereippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WhereipService_GetIp_FullMethodName  = "/whereip.WhereipService/GetIp"
	WhereipService_GetIps_FullMethodName = "/whereip.WhereipService/GetIps"
)

// WhereipServiceClient is the client API for WhereipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhereipServiceClient interface {
	GetIp(ctx context.Context, in *GetIpRequest, opts ...grpc.CallOption) (*GetIpResponse, error)
	GetIps(ctx context.Context, in *GetIpsRequest, opts ...grpc.CallOption) (*GetIpsResponse, error)
}

type whereipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhereipServiceClient(cc grpc.ClientConnInterface) WhereipServiceClient {
	return &whereipServiceClient{cc}
}

func (c *whereipServiceClient) GetIp(ctx context.Context, in *GetIpRequest, opts ...grpc.CallOption) (*GetIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpResponse)
	err := c.cc.Invoke(ctx, WhereipService_GetIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whereipServiceClient) GetIps(ctx context.Context, in *GetIpsRequest, opts ...grpc.CallOption) (*GetIpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsResponse)
	err := c.cc.Invoke(ctx, WhereipService_GetIps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhereipServiceServer is the server API for WhereipService service.
// All implementations must embed UnimplementedWhereipServiceServer
// for forward compatibility
type WhereipServiceServer interface {
	GetIp(context.Context, *GetIpRequest) (*GetIpResponse, error)
	GetIps(context.Context, *GetIpsRequest) (*GetIpsResponse, error)
	mustEmbedUnimplementedWhereipServiceServer()
}

// UnimplementedWhereipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhereipServiceServer struct {
}

func (UnimplementedWhereipServiceServer) GetIp(context.Context, *GetIpRequest) (*GetIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIp not implemented")
}
func (UnimplementedWhereipServiceServer) GetIps(context.Context, *GetIpsRequest) (*GetIpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIps not implemented")
}
func (UnimplementedWhereipServiceServer) mustEmbedUnimplementedWhereipServiceServer() {}

// UnsafeWhereipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhereipServiceServer will
// result in compilation errors.
type UnsafeWhereipServiceServer interface {
	mustEmbedUnimplementedWhereipServiceServer()
}

func RegisterWhereipServiceServer(s grpc.ServiceRegistrar, srv WhereipServiceServer) {
	s.RegisterService(&WhereipService_ServiceDesc, srv)
}

func _WhereipService_GetIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhereipServiceServer).GetIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhereipService_GetIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhereipServiceServer).GetIp(ctx, req.(*GetIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhereipService_GetIps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhereipServiceServer).GetIps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhereipService_GetIps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhereipServiceServer).GetIps(ctx, req.(*GetIpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhereipService_ServiceDesc is the grpc.ServiceDesc for WhereipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhereipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whereip.WhereipService",
	HandlerType: (*WhereipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIp",
			Handler:    _WhereipService_GetIp_Handler,
		},
		{
			MethodName: "GetIps",
			Handler:    _WhereipService_GetIps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whereip.proto",
}
